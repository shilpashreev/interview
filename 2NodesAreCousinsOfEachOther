package Tree;

import javax.swing.plaf.IconUIResource;
import java.util.LinkedList;
import java.util.Queue;

 class FindNextNodeOfAGivenNode {
    public static void main(String[] args) {
        Node node  = new Node(1);
        node.left = new Node(2);
        node.right = new Node(3);
        node.left.left = new Node(4);
        node.left.right = new Node(5);
        node.right.left = new Node(6);
        node.right.right = new Node(7);

        FindNextNodeOfAGivenNode findNextNode = new FindNextNodeOfAGivenNode();
     findNextNode.FindNextNode(node, 4,6);

    }

     private void FindNextNode(Node node, int val1, int val2) {

           Node temp1 = compare( val1,node);
           Node temp2 = compare(val2,node);

           if(temp1 == null || temp2 == null){
               System.out.println("node not found");
           }
           if(temp1.parent != temp2.parent  && temp1.ht == temp2.ht){
               System.out.println(" cousins");
           }else {
               System.out.println("not cousins");

           }
       }




     private Node compare(int i, Node node) {
         Queue<Node> queue = new LinkedList<>();
         queue.add(node);

         int count = 1;

         while (!queue.isEmpty()){

             int size= queue.size();

             while(size > 0){
                 Node temp = queue.poll();
                 size--;

                 if(temp.data == i){
                    return  temp;
                 }

                 if (temp.left != null){
                     queue.add(temp.left);
                     temp.left.parent = temp;
                     temp.left.ht = count;
                 }
                 if (temp.right != null){
                     queue.add(temp.right);
                     temp.right.parent = temp;
                     temp.right.ht = count;
                 }
             }
             count++;

         }
         return null;
     }

     static class Node{
        int data;
        Node left;
        Node right;
        Node parent;
        int ht;

        Node(int data){
            this.data = data;
        }
    }
}
