You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
 
 
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
     ListNode dummy = new ListNode(0);
        ListNode l3 = dummy;
        
        int carry = 0;
        
        
        while(l1 != null && l2 != null){
            int d = (l1.val + l2.val + carry) %10 ;
            carry = (l1.val + l2.val + carry) /10 ;

            
            ListNode node = new ListNode(d);
            l3.next =node;
            l3 = node;
            l1 = l1.next;
            l2 = l2.next;
        }
        
        while(l1 != null){
            int d = (l1.val + carry )%10;
            carry = (l1.val + carry)/10;
              ListNode node = new ListNode(d);
            l3.next =node;
            l3 = node;
            l1 = l1.next;
            
        }
        
          while(l2 != null){
            int d = (l2.val + carry )%10;
            carry = (l2.val + carry)/10;
              ListNode node = new ListNode(d);
            l3.next =node;
            l3 = node;
            l2 = l2.next;
            
        }
        
        if(l1 == null && l2 == null && carry != 0){
             ListNode node = new ListNode(carry);
             l3.next =node;
            l3 = node;
            
        }
        return dummy.next;
    }
}
