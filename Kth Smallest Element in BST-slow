/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int kthSmallest(TreeNode root, int k) {
        Queue<TreeNode> pq = new LinkedList<>();
        PriorityQueue<Integer> p = new PriorityQueue<>(Collections.reverseOrder());
        // Queue<TreeNode> q = new LinkedList<>();
        pq.add(root);
        
        while(!pq.isEmpty()){
            TreeNode node = pq.remove();
            if(node.left != null) pq.add(node.left);
            if(node.right != null) pq.add(node.right);
            p.add(node.val);
            while(p.size() > k){
                p.remove();
            }
        }
        return p.remove();
    }
}
